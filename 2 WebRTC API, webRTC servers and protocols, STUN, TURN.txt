1. WebRTC APIs
	three main tasks
		acquiring audio and video
		communicating audio and video
		communicating arbitrary data

	so, three primary objects
		MediaStream
			represents a stream of audio and/or video
				can contain multiple 'tracks'

			check supports
				if(!(navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia))

			obtain a MediaStream with navigator.getUserMedia()
				var constraints = {video: true};	// controls the contents of the MediaStream

				function successCallback(stream) {
				  var video = document.querySelector("video");		// get the element
				  video.src = window.URL.createObjectURL(stream);	// create a URL pointing to it
				}

				function errorCallback(error) {
				  console.log("navigator.getUserMedia error: ", error);
				}

				navigator.getUserMedia(constraints, successCallback, errorCallback);

			use contraints to control media type, resolution, frame rate
				video: {
				  mandatory: { minWidth: 640, minHeight: 360 },
				  optional [{ minWidth: 1280, minHeight: 720 }]
				}

			with web audio
				// Success callback when requesting audio input stream
				function gotStream(stream) {
				    var audioContext = new webkitAudioContext();

				    // Create an AudioNode from the stream
				    var mediaStreamSource = audioContext.createMediaStreamSource(stream);

				    // Connect it to the destination or any other node for processing!
				    mediaStreamSource.connect(audioContext.destination);
				}

				navigator.webkitGetUserMedia({audio:true}, gotStream);
				// Make sure to enable Web Audio Input in about:flags!

			screen capture
				var constraints = {
				  video: { mandatory: { chromeMediaSource: 'screen' }}
				};

				navigator.webkitGetUserMedia(constraints, gotStream);

		RTCPeerConnection
			it does a lot under the scene
				signal processing to remove noise
				codec selection, compression and decompression
				peer to peer communication, through firewalls, NATs, etc
				security
				bandwidth management
			
			code
				pc = new RTCPeerConnection(null);
				pc.onaddstream = gotRemoteStream;
				pc.addStream(localStream);
				pc.createOffer(gotOffer);
					// an SDP offer includes information about the WebRTC session, codec, etc, for the purpose of being sent over the signaling channel to a potential peer to request a connection or to update the configuration of an existing connection

				function gotOffer(desc) {
				  pc.setLocalDescription(desc);
				  sendOffer(desc);
				}

				function gotAnswer(desc) {
				  pc.setRemoteDescription(desc);
				}

				function gotRemoteStream(e) {
				  attachMediaStream(remoteVideo, e.stream);
				}

		RTCDataChannel
			properties
				same API as WebSockets
				ultra-low latency
				choose unreliable or reliable
				secure
			
			code
				var pc = new webkitRTCPeerConnection(servers,
				  {optional: [{RtpDataChannels: true}]});

				pc.ondatachannel = function(event) {
				  receiveChannel = event.channel;
				  receiveChannel.onmessage = function(event){
				    document.querySelector("div#receive").innerHTML = event.data;
				  };
				};

				sendChannel = pc.createDataChannel("sendDataChannel", {reliable: false});

				document.querySelector("button#send").onclick = function (){
				  var data = document.querySelector("textarea#send").value;
				  sendChannel.send(data);
				};

2. WebRTC servers and protocols
	signaling
		need to exchange 'session description' objects
			containing what formats I support, what I want to send
			network information for peer-to-peer setup
		can use any messaging mechanism
		can use any messaging protocol
	
	STUN
		tell me what my public IP address is
		cheap, but doesn't always work
	
	TURN
		provide a cloud fallback if peer-to-peer communication fails
			data is sent though servers once peer-to-peer communication fails
		ensures the call works in almost all environments
		always work, but have some costs

	ICE
		a framework for connecting peers
			tries STUN first
			if not working, then use TURN
		vast majority of calls can use STUN

3. deploying STUN/TURN
	public http://stackoverflow.com/questions/20068944/webrtc-stun-stun-l-google-com19302
	if you want to set up your own TURN server
		try 'rfc5766-turn-server', simply download and deploy to the cloud
		or 'restund'


